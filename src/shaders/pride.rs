//! Pride flag shaders.
//!
//! This file was generated by generate_pride_flags.nu
//! If there is weird shit in here it's not my fault. Just making that clear
#![allow(unused)]

use super::{hex, uniform_segments, ShaderExt2};
use palette::LinSrgb;
use shark::shader::{FragOne, Shader};

pub fn agender() -> impl Shader<FragOne> {
    uniform_segments(vec![hex(0xB9B9B9), hex(0xFFFFFF), hex(0xB8F483)])
}

pub fn aroace() -> impl Shader<FragOne> {
    uniform_segments(vec![
        hex(0xE28C00),
        hex(0xECCD00),
        hex(0xFFFFFF),
        hex(0x62AEDC),
        hex(0x203856),
    ])
}

pub fn aromantic() -> impl Shader<FragOne> {
    uniform_segments(vec![
        hex(0xA9A9A9),
        hex(0xFFFFFF),
        hex(0xA7D379),
        hex(0x3DA542),
    ])
}

pub fn asexual() -> impl Shader<FragOne> {
    uniform_segments(vec![
        hex(0x000000),
        hex(0xA3A3A3),
        hex(0xFFFFFF),
        hex(0x800080),
    ])
}

pub fn bear() -> impl Shader<FragOne> {
    uniform_segments(vec![
        hex(0x623804),
        hex(0xD56300),
        hex(0xFEDD63),
        hex(0xFEE6B8),
        hex(0xFFFFFF),
        hex(0x555555),
        hex(0x000000),
    ])
}

pub fn bigender() -> impl Shader<FragOne> {
    uniform_segments(vec![
        hex(0xC479A0),
        hex(0xECA6CB),
        hex(0xD6C7E7),
        hex(0xFFFFFF),
        hex(0x9BC7E8),
        hex(0x6B83CF),
    ])
}

pub fn bisexual() -> impl Shader<FragOne> {
    uniform_segments(vec![hex(0xD6006F), hex(0x724E94), hex(0x0038A7)])
}

pub fn gay_men() -> impl Shader<FragOne> {
    uniform_segments(vec![
        hex(0x078D70),
        hex(0x26CEAA),
        hex(0x99E8C2),
        hex(0xFFFFFF),
        hex(0x7BADE3),
        hex(0x5049CB),
        hex(0x3E1A78),
    ])
}

pub fn genderfluid() -> impl Shader<FragOne> {
    uniform_segments(vec![
        hex(0x333EBD),
        hex(0xFFFFFF),
        hex(0xBE18D6),
        hex(0xFF75A2),
    ])
}

pub fn genderqueer() -> impl Shader<FragOne> {
    uniform_segments(vec![hex(0xFFFFFF), hex(0x4A8123), hex(0xB57EDC)])
}

pub fn intersex() -> impl Shader<FragOne> {
    uniform_segments(vec![hex(0x7902AA), hex(0xFFD800)])
}

pub fn intersex_inclusive_pride() -> impl Shader<FragOne> {
    uniform_segments(vec![
        hex(0xFFFFFF),
        hex(0xF5A9B8),
        hex(0x5BCEFA),
        hex(0x000000),
        hex(0x784F17),
        hex(0xE20A17),
        hex(0xFD8D25),
        hex(0xFEEC34),
        hex(0x108028),
        hex(0x0F54FB),
        hex(0x751086),
        hex(0x7902AA),
        hex(0xFFD800),
    ])
}

pub fn labrys_lesbian() -> impl Shader<FragOne> {
    uniform_segments(vec![hex(0x792491), hex(0xFFFFFF), hex(0x000000)])
}

pub fn lesbian() -> impl Shader<FragOne> {
    uniform_segments(vec![
        hex(0x8A1E04),
        hex(0xC54E54),
        hex(0xE4ACCF),
        hex(0xEDEDEB),
        hex(0xD063A6),
        hex(0xB75592),
        hex(0xA40061),
    ])
}

pub fn lipstick_lesbian() -> impl Shader<FragOne> {
    uniform_segments(vec![
        hex(0x8A1E04),
        hex(0xC54E54),
        hex(0xE4ACCF),
        hex(0xEDEDEB),
        hex(0xD063A6),
        hex(0xB75592),
        hex(0xA40061),
        hex(0xEB1449),
    ])
}

pub fn nonbinary() -> impl Shader<FragOne> {
    uniform_segments(vec![
        hex(0x9C5CD4),
        hex(0xFFFFFF),
        hex(0xFCF434),
        hex(0x2C2C2C),
    ])
}

pub fn omnisexual() -> impl Shader<FragOne> {
    uniform_segments(vec![
        hex(0xFF9BCF),
        hex(0xFF55C0),
        hex(0x250148),
        hex(0x675EFF),
        hex(0x8FA7FF),
    ])
}

pub fn pangender() -> impl Shader<FragOne> {
    uniform_segments(vec![
        hex(0xFFF798),
        hex(0xFFDDCD),
        hex(0xFFEBFD),
        hex(0xFFFFFF),
    ])
}

pub fn pansexual() -> impl Shader<FragOne> {
    uniform_segments(vec![hex(0xD6006F), hex(0xFFD800), hex(0x21B1FF)])
}

pub fn philadelphia_pride() -> impl Shader<FragOne> {
    uniform_segments(vec![
        hex(0x000000),
        hex(0x784F17),
        hex(0xE40303),
        hex(0xFF8C00),
        hex(0xFFED00),
        hex(0x008026),
        hex(0x004DFF),
        hex(0x750787),
    ])
}

pub fn pink_union_jack() -> impl Shader<FragOne> {
    uniform_segments(vec![hex(0xFFFFFF), hex(0xFA87D2), hex(0xE00034)])
}

pub fn polysexual() -> impl Shader<FragOne> {
    uniform_segments(vec![hex(0xF61CB9), hex(0x07D569), hex(0x1C92F6)])
}

pub fn pride() -> impl Shader<FragOne> {
    uniform_segments(vec![
        hex(0xFF69B4),
        hex(0xE20A17),
        hex(0xFF8E00),
        hex(0xFFFF00),
        hex(0x008E00),
        hex(0x00C0C0),
        hex(0x400098),
        hex(0x8E008E),
    ])
}

pub fn progress_pride() -> impl Shader<FragOne> {
    uniform_segments(vec![
        hex(0xFFFFFF),
        hex(0xF5A9B8),
        hex(0x5BCEFA),
        hex(0x000000),
        hex(0x784F17),
        hex(0xE20A17),
        hex(0xFD8D25),
        hex(0xFEEC34),
        hex(0x108028),
        hex(0x0F54FB),
        hex(0x751086),
    ])
}

pub fn sapphic() -> impl Shader<FragOne> {
    uniform_segments(vec![hex(0xFE8CA9), hex(0xFCF3FF), hex(0xC56BC5)])
}

pub fn south_african_pride() -> impl Shader<FragOne> {
    uniform_segments(vec![
        hex(0x000000),
        hex(0x784F17),
        hex(0xE40303),
        hex(0xFF8C00),
        hex(0xFFED00),
        hex(0x008026),
        hex(0x004DFF),
        hex(0x750787),
    ])
}

pub fn transgender() -> impl Shader<FragOne> {
    uniform_segments(vec![hex(0x5BCEFA), hex(0xF5A9B8), hex(0xFFFFFF)])
}

pub fn twink() -> impl Shader<FragOne> {
    uniform_segments(vec![
        hex(0xFFB0FF),
        hex(0xFFFFFF),
        hex(0x000000),
        hex(0xFFFF80),
    ])
}

pub(super) const FLAGS: &[fn() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>>] = &[
    {
        fn agender_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(agender().to_linsrgb())
        }
        agender_wrapped
    },
    {
        fn aroace_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(aroace().to_linsrgb())
        }
        aroace_wrapped
    },
    {
        fn aromantic_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(aromantic().to_linsrgb())
        }
        aromantic_wrapped
    },
    {
        fn asexual_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(asexual().to_linsrgb())
        }
        asexual_wrapped
    },
    {
        fn bear_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(bear().to_linsrgb())
        }
        bear_wrapped
    },
    {
        fn bigender_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(bigender().to_linsrgb())
        }
        bigender_wrapped
    },
    {
        fn bisexual_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(bisexual().to_linsrgb())
        }
        bisexual_wrapped
    },
    {
        fn gay_men_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(gay_men().to_linsrgb())
        }
        gay_men_wrapped
    },
    {
        fn genderfluid_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(genderfluid().to_linsrgb())
        }
        genderfluid_wrapped
    },
    {
        fn genderqueer_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(genderqueer().to_linsrgb())
        }
        genderqueer_wrapped
    },
    {
        fn intersex_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(intersex().to_linsrgb())
        }
        intersex_wrapped
    },
    {
        fn intersex_inclusive_pride_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(intersex_inclusive_pride().to_linsrgb())
        }
        intersex_inclusive_pride_wrapped
    },
    {
        fn labrys_lesbian_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(labrys_lesbian().to_linsrgb())
        }
        labrys_lesbian_wrapped
    },
    {
        fn lesbian_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(lesbian().to_linsrgb())
        }
        lesbian_wrapped
    },
    {
        fn lipstick_lesbian_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(lipstick_lesbian().to_linsrgb())
        }
        lipstick_lesbian_wrapped
    },
    {
        fn nonbinary_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(nonbinary().to_linsrgb())
        }
        nonbinary_wrapped
    },
    {
        fn omnisexual_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(omnisexual().to_linsrgb())
        }
        omnisexual_wrapped
    },
    {
        fn pangender_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(pangender().to_linsrgb())
        }
        pangender_wrapped
    },
    {
        fn pansexual_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(pansexual().to_linsrgb())
        }
        pansexual_wrapped
    },
    {
        fn philadelphia_pride_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(philadelphia_pride().to_linsrgb())
        }
        philadelphia_pride_wrapped
    },
    {
        fn pink_union_jack_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(pink_union_jack().to_linsrgb())
        }
        pink_union_jack_wrapped
    },
    {
        fn polysexual_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(polysexual().to_linsrgb())
        }
        polysexual_wrapped
    },
    {
        fn pride_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(pride().to_linsrgb())
        }
        pride_wrapped
    },
    {
        fn progress_pride_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(progress_pride().to_linsrgb())
        }
        progress_pride_wrapped
    },
    {
        fn sapphic_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(sapphic().to_linsrgb())
        }
        sapphic_wrapped
    },
    {
        fn south_african_pride_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(south_african_pride().to_linsrgb())
        }
        south_african_pride_wrapped
    },
    {
        fn transgender_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(transgender().to_linsrgb())
        }
        transgender_wrapped
    },
    {
        fn twink_wrapped() -> Box<dyn Shader<FragOne, Output = LinSrgb<f64>>> {
            Box::new(twink().to_linsrgb())
        }
        twink_wrapped
    },
];
